// Generated by CoffeeScript 1.12.1
(function() {
  var HyperLink, MetaItem, arrayToUl, footer, link, linkMap, links, meta, metaMap, metas;

  metas = document.getElementsByTagName('meta');

  links = document.getElementsByTagName('link');

  arrayToUl = function(array) {
    var i, j, len, ul, wrapLi;
    wrapLi = function(object) {
      var li;
      li = document.createElement('li');
      if (object.toNode) {
        li.appendChild(object.toNode());
      } else if (object instanceof Node) {
        li.appendChild(object);
      } else {
        li.textContent = object;
      }
      return li;
    };
    ul = document.createElement('ul');
    for (j = 0, len = array.length; j < len; j++) {
      i = array[j];
      ul.appendChild(wrapLi(i));
    }
    return ul;
  };

  HyperLink = (function() {
    function HyperLink(text, url, title) {
      this.text = text;
      this.url = url;
      if (title) {
        this.title = title;
      }
    }

    HyperLink.prototype.toNode = function() {
      var node;
      node = document.createElement('a');
      node.href = this.url;
      node.textContent = this.text;
      if (this.title) {
        node.title = this.title;
      }
      return node;
    };

    return HyperLink;

  })();

  HyperLink.fromLink = function(link) {
    return new HyperLink(link.title, link.href, link.rel);
  };

  HyperLink.fromTag = function(tag) {
    return new HyperLink(tag, "index.html?tags=" + tag);
  };

  MetaItem = (function() {
    function MetaItem(name, value, className) {
      this.name = name;
      this.value = value;
      if (className) {
        this.className = className;
      }
    }

    MetaItem.prototype.toNode = function() {
      var dd, dl, dt, ref;
      dl = document.createElement('dl');
      if (this.className) {
        dl.className = this.className;
      }
      dt = document.createElement('dt');
      dt.textContent = this.name;
      dl.appendChild(dt);
      dd = document.createElement('dd');
      if ((ref = this.value) != null ? ref.toNode : void 0) {
        dd.appendChild(this.value.toNode());
      } else if (this.value instanceof Node) {
        dd.appendChild(this.value);
      } else {
        dd.textContent = this.value;
      }
      dl.appendChild(dd);
      return dl;
    };

    return MetaItem;

  })();

  MetaItem.createDate = function(dateString) {
    var date;
    date = new Date(dateString);
    date.toString = date.toISOString;
    return new MetaItem('date', date);
  };

  MetaItem.createTags = function(tagsString) {
    var value;
    value = tagsString.split(/,/g);
    if (/^\/[^\/]*$/.test(window.location.pathname)) {
      value = value.map(HyperLink.fromTag);
    }
    value.toNode = function() {
      return arrayToUl(this);
    };
    return new MetaItem('tags', value);
  };

  metaMap = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = metas.length; j < len; j++) {
      meta = metas[j];
      switch (meta.name) {
        case 'keywords':
          results.push(MetaItem.createTags(meta.content));
          break;
        case 'date':
          results.push(MetaItem.createDate(meta.content));
          break;
        case 'copyright':
        case 'author':
          results.push(new MetaItem(meta.name, meta.content));
          break;
        default:
          results.push(void 0);
      }
    }
    return results;
  })();

  metaMap.toNode = function() {
    var div, j, len, ref;
    div = document.createElement('div');
    ref = this;
    for (j = 0, len = ref.length; j < len; j++) {
      meta = ref[j];
      if (meta) {
        div.appendChild(meta.toNode());
      }
    }
    return div;
  };

  linkMap = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = links.length; j < len; j++) {
      link = links[j];
      switch (link.rel) {
        case 'prev':
        case 'index':
        case 'next':
          results.push(new MetaItem(link.rel, new HyperLink.fromLink(link), 'browser-only'));
          break;
        default:
          results.push(void 0);
      }
    }
    return results;
  })();

  linkMap.push(new MetaItem('url', new HyperLink(window.location, window.location, 'this page url'), 'print-only'));

  linkMap.toNode = function() {
    var div, j, len, ref;
    div = document.createElement('div');
    ref = this;
    for (j = 0, len = ref.length; j < len; j++) {
      link = ref[j];
      if (link) {
        div.appendChild(link.toNode());
      }
    }
    div.id = 'rel-page';
    return div;
  };

  footer = (function() {
    var footerList;
    footerList = document.getElementsByTagName('footer');
    return footerList[footerList.length - 1];
  })();

  footer.appendChild(metaMap.toNode());

  footer.appendChild(linkMap.toNode());

}).call(this);
