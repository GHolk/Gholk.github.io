// Generated by CoffeeScript 1.12.1
(function() {
  var HrArticle, article, articleList, filterByFunction, outputMatchNumber, queryForm;

  HrArticle = (function() {
    var getTagsFromUl;

    getTagsFromUl = function(ul) {
      var i, len, li, ref, results;
      ref = ul.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        li = ref[i];
        results.push(li.textContent.trim());
      }
      return results;
    };

    function HrArticle(articleNode) {
      this.title = articleNode.getElementsByTagName('h2')[0].textContent.trim();
      this.url = articleNode.getElementsByTagName('h2')[0].children[0].href;
      this.date = new Date(articleNode.getElementsByTagName('small')[0].textContent);
      this.description = articleNode.getElementsByTagName('p')[0].textContent;
      this.tags = getTagsFromUl(articleNode.getElementsByTagName('ul')[0]);
      this.raw = articleNode.textContent;
      this.node = articleNode;
    }

    HrArticle.prototype.hasTag = function(tag) {
      return this.tags.some(function(articleTag) {
        return articleTag === tag;
      });
    };

    HrArticle.prototype.show = function(toShow) {
      if (toShow === true) {
        return this.node.className = 'show-article';
      } else if (toShow === false) {
        return this.node.className = 'hide-article';
      } else {
        return this.node.className;
      }
    };

    return HrArticle;

  })();

  articleList = (function() {
    var i, len, ref, results;
    ref = document.getElementsByTagName('article');
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      article = ref[i];
      results.push(new HrArticle(article));
    }
    return results;
  })();

  window.articleList = articleList;

  queryForm = document.getElementById('query-article');

  queryForm.onsubmit = function(evt) {
    var conditionStatement;
    evt.preventDefault();
    conditionStatement = this.elements['query-statement'].value;
    return filterByFunction(function(article) {
      var date, description, hasTag, node, raw, tags, title, url;
      title = article.title;
      url = article.url;
      description = article.description;
      tags = article.tags;
      date = article.date;
      raw = article.raw;
      node = article.node;
      hasTag = article.hasTag.bind(article);
      return eval(conditionStatement);
    });
  };

  outputMatchNumber = queryForm.elements['match-number'];

  filterByFunction = function(callback) {
    var matchList;
    articleList.forEach(function(article) {
      return article.show(false);
    });
    matchList = articleList.filter(callback);
    matchList.forEach(function(article) {
      return article.show(true);
    });
    return outputMatchNumber.value = matchList.length;
  };

}).call(this);
