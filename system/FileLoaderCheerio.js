// Generated by CoffeeScript 1.12.7
(function() {
  var FileLoaderCheerio, cheerio, fs;

  cheerio = require('cheerio');

  fs = require('fs');

  FileLoaderCheerio = (function() {
    function FileLoaderCheerio(path) {
      this.path = path;
      this.file = path.replace(/^.*\//, '');
      this.selector = cheerio.load(fs.readFileSync(path, 'utf8'), {
        decodeEntities: false,
        xmlMode: false,
        withDomLvl1: true,
        normalizeWhitespace: false
      });
      this.parse();
    }

    FileLoaderCheerio.prototype.parse = function() {
      this.file = this.path.replace(/^.*\//, '');
      this.date = this.selector('meta[name=date]').attr('content');
      this.tags = this.selector('meta[name=keywords]').attr('content');
      this.title = this.selector('title').text();
      this.prev = this.selector('link[rel=prev]').attr('href');
      this.prevTitle = this.selector('link[rel=prev]').attr('title');
      this.next = this.selector('link[rel=next]').attr('href');
      this.nextTitle = this.selector('link[rel=next]').attr('title');
      this.main = this.selector('main').html();
      return this.description = this.selector('main > :not(h1)').first().text();
    };

    FileLoaderCheerio.prototype.sync = function() {
      this.selector('meta[name=date]').attr('content', this.date);
      this.selector('meta[name=keywords]').attr('content', this.tags);
      this.selector('title').text(this.title);
      this.selector('link[rel=prev]').attr('href', this.prev);
      this.selector('link[rel=prev]').attr('title', this.prevTitle);
      this.selector('link[rel=next]').attr('href', this.next);
      this.selector('link[rel=next]').attr('title', this.nextTitle);
      this.description = this.selector('main > :not(h1)').first().text();
      return this.file = this.path.replace(/^.*\//, '');
    };

    FileLoaderCheerio.prototype.update = function(newLoader) {
      var i, key, len, ref, results;
      ref = ['tags', 'title', 'main'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        results.push(this[key] = newLoader[key]);
      }
      return results;
    };

    FileLoaderCheerio.prototype.write = function(path) {
      if (path == null) {
        path = this.path;
      }
      return fs.writeFileSync(path, this.selector.html(), 'utf8');
    };

    return FileLoaderCheerio;

  })();

  module.exports = FileLoaderCheerio;

}).call(this);
