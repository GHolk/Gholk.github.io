// Generated by CoffeeScript 1.12.1
(function() {
  var HTMLLoader, TextLoader, createTemplateLoader, err, filePath, fs, htmlLoader, maintainTemplate, marked, textLoader;

  fs = require('fs');

  HTMLLoader = require('FileLoaderCheerio');

  marked = require('marked');

  filePath = (function() {
    var html, name, template, text;
    name = process.argv.slice(-1);
    text = "../text/" + name + ".txt";
    html = "../" + name + ".html";
    template = 'template.html';
    return {
      text: text,
      html: html
    };
  })();

  TextLoader = (function() {
    function TextLoader(path) {
      this.path = path;
      this.file = path.replace(/^.*\//, '');
      this.rawText = fs.readFileSync(path, 'utf8');
      this.parse();
    }

    TextLoader.prototype.parse = function() {
      var tagsRegexp;
      tagsRegexp = /^#\S+$/gm;
      this.title = this.rawText.match(/.+/)[0];
      this.tags = this.rawText.match(tagsRegexp).join(',').replace(/#/g, '');
      return this.main = marked(this.rawText.replace(tagsRegexp, ''));
    };

    return TextLoader;

  })();

  textLoader = new TextLoader(filePath.text);

  maintainTemplate = function(templateLoader, thisFile, thisTitle) {
    var updateRel, updateTemplateLoader;
    updateRel = function(prevPath, thisFile, thisTitle) {
      var prevLoader;
      prevLoader = new HTMLLoader("../" + prevPath);
      prevLoader.next = thisFile;
      prevLoader.nextTitle = thisTitle;
      prevLoader.sync();
      return prevLoader.write();
    };
    updateTemplateLoader = function(templateLoader, thisFile, thisTitle) {
      var oldPrev;
      oldPrev = templateLoader.prev;
      templateLoader.prev = thisFile;
      templateLoader.prevTitle = thisTitle;
      templateLoader.sync();
      templateLoader.write();
      return templateLoader.prev = oldPrev;
    };
    updateRel(templateLoader.prev, thisFile, thisTitle);
    return updateTemplateLoader(templateLoader, thisFile, thisTitle);
  };

  createTemplateLoader = function() {
    var templateLoader;
    templateLoader = new HTMLLoader('template.html');
    templateLoader.update = function(newLoader) {
      HTMLLoader.prototype.update.call(this, newLoader);
      return this.date = (new Date()).toISOString();
    };
    return templateLoader;
  };

  try {
    htmlLoader = new HTMLLoader(filePath.html);
  } catch (error) {
    err = error;
    console.error(err);
    console.error('no html file, read `template.html`. ');
    htmlLoader = createTemplateLoader();
    maintainTemplate(htmlLoader, textLoader);
    htmlLoader.path = filePath.html;
  } finally {
    htmlLoader.update(textLoader);
    htmlLoader.sync();
    htmlLoader.write();
  }

}).call(this);
