// Generated by CoffeeScript 1.12.1
(function() {
  var HTMLFromText, Loader, fileNames, fs, marked, path, whenTextFileReady;

  fs = require('fs');

  path = require('path');

  Loader = require('./LoaderByCheerio.js');

  marked = require('/home/c34031328/code/marked');

  fileNames = (function() {
    var htmlFileName, pathObject, templateFileName, textFileName;
    textFileName = process.argv[process.argv.length - 1];
    if (!process.argv[2]) {
      throw "no filename given!";
    }
    pathObject = path.parse(textFileName);
    pathObject.dir = path.join(pathObject.dir, '..');
    pathObject.ext = '.html';
    pathObject.base = pathObject.base.replace(/\..*?$/, '.html');
    htmlFileName = path.format(pathObject);
    templateFileName = path.join(path.dirname(htmlFileName), 'system/template.html');
    return {
      text: textFileName,
      html: htmlFileName,
      template: templateFileName
    };
  })();

  HTMLFromText = (function() {
    function HTMLFromText(text) {
      this.rawText = text;
    }

    HTMLFromText.prototype.tags = function() {
      var tag, tagsMatch;
      tagsMatch = (this.rawText.match(/\n#\S+/g)) || [];
      return ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = tagsMatch.length; i < len; i++) {
          tag = tagsMatch[i];
          results.push(tag.substr(2));
        }
        return results;
      })()).join(',');
    };

    HTMLFromText.prototype.title = function() {
      return (this.rawText.match(/.+/))[0];
    };

    HTMLFromText.prototype.date = function() {
      var date;
      date = new Date();
      return date.toISOString();
    };

    HTMLFromText.prototype.main = function() {
      return marked(this.rawText.replace(/\n#\S+/g, ''));
    };

    return HTMLFromText;

  })();

  whenTextFileReady = function(err, rawText) {
    var textLoader, whenHTMLFileReady, whenTemplateFileReady;
    if (err) {
      throw err;
    }
    textLoader = new HTMLFromText(rawText);
    whenHTMLFileReady = function(err, HTMLText) {
      var HTMLLoader;
      if (err) {
        return fs.readFile(fileNames.template, 'utf8', whenTemplateFileReady);
      } else {
        HTMLLoader = new Loader(HTMLText);
        HTMLLoader.update(textLoader);
        return fs.writeFile(fileNames.html, HTMLLoader.toString(), 'utf8', function() {});
      }
    };
    whenTemplateFileReady = function(err, HTMLText) {
      var isHide, templateLoader, updatePrevNext, whenHTMLWrite;
      if (err) {
        throw err;
      }
      templateLoader = new Loader(HTMLText);
      updatePrevNext = function(oldHTMLPath, nextFileName, nextFileTitle) {
        var whenOldHTMLRead;
        whenOldHTMLRead = function(err, HTMLText) {
          var oldHTMLLoader;
          if (err) {
            throw err;
          }
          oldHTMLLoader = new Loader(HTMLText);
          oldHTMLLoader.next(nextFileName, nextFileTitle);
          try {
            return fs.writeFile(oldHTMLPath, oldHTMLLoader.toString(), 'utf8', function(err) {
              if (err) {
                throw err;
              }
            });
          } catch (error) {
            err = error;
            console.error(err);
            return console.error("can't write to `" + oldHTMLPath + "` . ");
          }
        };
        try {
          return fs.readFile(oldHTMLPath, 'utf8', whenOldHTMLRead);
        } catch (error) {
          err = error;
          console.error(err);
          return console.error("have no prev html file `" + oldHTMLPath + "` . ");
        }
      };
      isHide = textLoader.tags().split(',').indexOf('hide') !== -1;
      if (isHide) {
        templateLoader.prev('remove');
        templateLoader.next('remove');
      } else {
        updatePrevNext('../' + templateLoader.prev(), fileNames.html.slice(3), textLoader.title());
      }
      templateLoader.update(textLoader);
      whenHTMLWrite = function(err) {
        if (err) {
          throw err;
        }
        templateLoader.clear();
        templateLoader.prev(fileNames.html.slice(3));
        return fs.writeFile(fileNames.template, templateLoader.toString(), 'utf8', function(err) {
          if (err) {
            throw err;
          }
        });
      };
      return fs.writeFile(fileNames.html, templateLoader.toString(), 'utf8', isHide ? function(err) {
        if (err) {
          throw err;
        }
      } : whenHTMLWrite);
    };
    return fs.readFile(fileNames.html, 'utf8', whenHTMLFileReady);
  };

  fs.readFile(fileNames.text, 'utf8', whenTextFileReady);

}).call(this);
