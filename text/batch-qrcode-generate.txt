# 將檔案編碼為 QR code 的工具
本程式可以將字串分割編碼為 qr code，供連續掃描後合併回檔案。
因為之前開了個腦洞，在想要如何寄紙本加密信件，
加密我的想法就只有 pgp，然後再加一個把數位資料轉紙本的方式
印出來後用 ocr 好像不太準確，且 ocr 對一般人不夠普及。
後來就想到編碼成 qr code，配合一些 app 有連續掃描功能，
掃完後再匯出，於是就這樣成了。

qr code 可以很大，但問題是手機的鏡頭沒有那麼大和清晰。
雖然理論上也可以用掃描器掃描後再用電腦去判讀，
但一樣有技術不夠普及，對一般使用者不友善的問題。
所以要把資料拆成多個 qr code，
再借助另一項某些 qr code 掃描器的功能，連續掃描。

以我用的 qr code 掃描器 [binary eye] 來說，
就是開啟連續掃描功能，然後掃完後進到歷史記錄，
選擇匯出掃描記錄即可。
掃描記錄可以是 csv 或 json，總之都是用 linux 可以簡單處理的格式。

[binary eye]: https://play.google.com/store/apps/details?id=de.markusfisch.android.binaryeye

資料格式的話，我不確定 qr code 能不能塞二進位資料，
但我不想給自己找麻煩，還得找一款能讀取二進位的 qr code scaner，
所以最簡單的方式就是先用 base64 編碼資料。
因為 linux base64 工具默認會自己切割資料了，
但如果用我原本的想法 64 個字元切成一個 qr code，
加上換行符字數變奇數，qr code 就會斷在奇怪的地方，
所以後來加了一個用換行切割的功能。

我掃描時碰到幾個問題，第一個是如果照常規排版每行由左到右，
掃完一行時換行可能會亂掉，而且也沒效率，應該要用 s 型的排列。
所以我加了個簡單的 s 型排版功能，但也把版型固定成四欄。

再來是有時可能會漏掃或重復掃，應該要加個 checksum 機制。
我後來幫每個 qr code 標了編號，
應該就不會亂掉了，最後總數也可以用來驗證。
之後我又幫每個 qr code 下面標上內容字串，
可以用來找出哪個漏掃。

但最後還有個問題是瀏覽器印出來時，
某些 qr code 可能被分頁切斷。
我試了 css 的 `page-break: avoid` ，但 chromium 還是會切斷，
無論我的 qr code 是用 img 或 canvas。
目前只確定 firefox 是可以用的，chromium 就再等等吧。

## 2022-10 大張尺寸改版
原本本工具是印出大量的小張 qrcode，但大張 qrcode 在儲存上比較有效率，
所以改版讓本工具可以方便印出較大張的 qrcode。

建議使用每張 512 個字元的 qrcode，並每列 3 張 qrcode，直式列印可以印四列。
這樣單面可以容納 12 張 qrcode，6144 個字元，base64 編碼前為 4608 byte。
操作上把 *每列字元數* 設為 512，再按下重新切割字串，
後勾選 *依換行分割字串* 再按 *encode* 即可。

另一種印法是每張 1024 字元，每列 3 張，用橫式列印一頁二列。
但這種作法要調一下頁緣間距，很容易超過。

而且 qrcode 太大張不太好掃，也最好不要摺到。
除了不能摺到 qrcode 內部，外部也最好不要。
紙張有摺痕的話，山線谷線多少會讓紙面有弧度，
然後 qrcode 扭曲就掃不出來。
如果非摺不可，要掃時可以考慮撕開，
紙面沒有摺線的話就不會有扭曲的問題了。

### 其他改版說明：

* S 型排列無法在每列 4 張 qrcode 以外場合正常運作
* 預設行為變為依換行分割字串
* *重新切割字串* 按鈕會刪除換行符後，依每列字元數目斷行。
* *每列字元數* 清除內容後，雙擊文字框會出現建議的字元數，
  對應各尺寸 qrcode 的容量上限。
* qrcode 尺寸是在 qrcode 邊界過大或超出顯示範圍時，用來調整大小的。
  原則上是依 *每列的 qrcode 數目* 自動調整大小。
* 這個 qrcode library qrious 不能輸入 unicode 字串，輸出會壞掉。
  之前就是這樣，但沒有特別寫出來，只有建議用 base64。

<form>
<label>
<h2>原始資料</h2>
<textarea name="text-data"></textarea></label>
<label><input name="snake-render" 
    onchange="qrcodeBatcher.handleStyleCheckbox(this)"
    data-style-name="snake"
    type="checkbox">S 型排列 qr code (只在每列 4 個 qrcode 下有效)</label>
<label><input name="split-by-newline" type="checkbox" checked>
依換行分割字串</label>

<label><input name="show-text-data" type="checkbox" checked="true"
    onchange="qrcodeBatcher.handleStyleCheckbox(this)"
    data-style-name="ellipsis">顯示省略版字串</label>

<label>每列的 qrcode 數目
<input name="qrcode-per-row" type="number"
    value="3" min="2" max="4" step="1"></label>

<div><label>每列字元數<input name="character-per-line" type="number"
min="64" max="2953" value="512" list="qrcode-byte-capacity"></label>
<button type="button"
onclick="qrcodeBatcher.getFormNode('character-per-line').value = ''">
clear</button>
<button type="button"
onclick="qrcodeBatcher.splitTextPerLine()">重新切割字串</button>
<datalist id="qrcode-byte-capacity">
<option value="64">
<option value="256">
<option value="512">
<option value="1024">
<option value="2048">
<option value="2953">
</datalist>
</div>

<label>qr-code 尺寸
<input name="qrcode-canvas-size" type="range" min="33" max="180" value="77"
oninput="qrcodeBatcher.handleSizeChange()"></label>

<button type="button" onclick="qrcodeBatcher.handleEncode()">encode</button>

<label>
<h2>QR code</h2>
<output name="qr-code-area" class="ellipsis"></output></label>
</form>

<style>
form > * {
    display: block;
}
form textarea {
    width: 100%;
    min-height: 16em;
}
output .item {
    box-sizing: border-box;
    width: 25%;
    float: left;
    counter-increment: image-counter;
    border: solid 1px;
}
.item img, .item canvas {
    width: 90%;
    display: block;
    margin: 5% auto;
    image-rendering: pixelated;
}
.item .subtitle {
    display: inline-block;
    width: 70%;
    margin: 0 1em;
    height: 15em;
}
.ellipsis .item .subtitle {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    height: auto;
}
output .item::after {
    content: counter(image-counter);
    display: inline-block;
}
output.snake .item:nth-child(8n+1),
output.snake .item:nth-child(8n+2),
output.snake .item:nth-child(8n+3),
output.snake .item:nth-child(8n+4) {
    float: left;
    clear: right;
}
output.snake .item:nth-child(8n+5),
output.snake .item:nth-child(8n+6),
output.snake .item:nth-child(8n+7),
output.snake .item:nth-child(8n) {
    float: right;
    clear: left;
}
output:after {
    content: ' ';
    clear: both;
    display: block;
}

@media print {
    body {
        max-width: 100%;
    }
    @page {
        margin: 1em;
    }
    output {
        page-break-before: always;
        padding: 1em;
    }
    output .item, output .item * {
        page-break-inside: avoid;
        break-inside: avoid;
    }
    output .item > canvas {
        width: 96%;
        margin: 2% auto;
    }
    form + * {
        clear: both;
    }
    footer {
        display: block;
        clear: both;
        page-break-inside: avoid;
        break-inside: avoid;
    }
}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>

<script>
    var qrcodeBatcher = {
        qrious: new QRious(),
        form: document.getElementsByTagName('form')[0],
        getFormNode(name) {
            return this.form.elements[name]
        },
        handleTextInput() {
            const textarea = this.getFormNode('text-data')
            textarea.style.height = textarea.scrollHeight + 'px'
        },
        handleStyleCheckbox(node) {
            const output = this.getFormNode('qr-code-area')
            if (node.checked) {
                output.classList.add(node.dataset.styleName)
            }
            else output.classList.remove(node.dataset.styleName)
        },
        *segmentText64(text) {
            let i = 0
            const n = 64
            do {
                yield text.slice(i, i+n)
                i += n
            }
            while (i < text.length)
        },
        splitTextPerLine(width) {
            if (!width) width = Number(
                this.getFormNode('character-per-line').value
            )
            const field = this.getFormNode('text-data')
            const value = field.value.replace(/\n/g, '')
            const list = []
            for (let i=0; i<value.length; i+=width) {
                list.push(value.slice(i, i+width))
            }
            field.value = list.join('\n')
        },
        handleSizeChange() {
            const size = Number(this.getFormNode('qrcode-canvas-size').value)
            this.qriousCanvasSize = size
            this.getFormNode('qr-code-area')
                .querySelectorAll('canvas')
                .forEach(canvas => canvas.qrious.size = size)
        },
        segmentText(text = this.getFormNode('text-data').value) {
            if (this.getFormNode('split-by-newline').checked) {
                return text.split(/\n/)
            }
            else return this.segmentText64(text)
        },
        handleEncode() {
            this.getFormNode('qr-code-area').textContent = ''
            for (const seg of this.segmentText()) {
                const canvas = this.textToCanvas(seg)
                this.renderImage(canvas, seg)
                // const url = this.textToDataUrl(seg)
                // const image = document.createElement('img')
                // image.src = url
                // this.renderImage(image)
            }
        },
        renderImage(node, segment) {
            const output = this.getFormNode('qr-code-area')
            const item = document.createElement('div')
            item.className = 'item'
            item.appendChild(node)
            const count = Number(this.getFormNode('qrcode-per-row').value)
            item.style.width = 100 / count + '%'
            const subtitle = document.createElement('div')
            subtitle.className = 'subtitle'
            subtitle.textContent = segment
            item.appendChild(subtitle)
            output.appendChild(item)
        },
        qriousCanvasSize: 77,
        textToCanvas(text) {
            const qrcode = new QRious({
                value: text,
                size: this.qriousCanvasSize
            })
            return qrcode.canvas
        },
        textToDataUrl(text) {
            this.qrious.value = text
            return this.qrious.toDataURL()
        },
        textToGoogleImageUrl(text) {
            const url = encodeURIComponent(text)
            const qrcodeUrl = `http://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=${url}`
            return qrcodeUrl
        }
    }
</script>

#qr-code
#tool
#js
#web
#手機
