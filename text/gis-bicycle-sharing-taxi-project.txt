# 共享單車發展對計程車與公共運輸系統影響分析
近年來世界各國吹起共享單車風，
台灣以台北地區的 ubike 系統最為發達。
許多民眾也開始以 ubike 代步，不再騎自己的機車或開車。
同時因為 ubike 的方便甚至限時免費策略，
也分走了計程車與其它公共運輸系統的一部份乘客數，
一些計程車司機也因此抱怨 ubike 搶走了他們的生意。
本計劃預計用台北地區 ubike 與計程車的開放資料，
分析二者在地區、時間上彼此消長的情形。

## 研究方法
希望能取得不同年份上 ubike 的各站點位置與使用人次，
分析 ubike 擴展據點與使用人次的成長關係，
及在 ubike 擴張範圍內，捷運、公車運量是否困此有變化。
更進一步，希望能取得 ubike 借還地資料，
計算 ubike 的使用距離，與捷運進出站距離的比較。

## 數據
ubike 可以在官網找到現有站點對應的地址，
而 [各站點設置日期則在維基百科有記錄][ubike station list] ，
同時有 [每月租賃人次的統計][ubike month times] 。
[計程車營運可以在政府的開放資料平台找到二年統計一次的資料][taxi open data] 。

[ubike station list]: https://zh.wikipedia.org/wiki/%E8%87%BA%E5%8C%97%E5%B8%82%E5%85%AC%E5%85%B1%E8%87%AA%E8%A1%8C%E8%BB%8A%E7%A7%9F%E8%B3%83%E7%B3%BB%E7%B5%B1%E7%AB%99%E9%BB%9E%E5%88%97%E8%A1%A8 "維基百科上的 youbike 站點列表"
[ubike month times]: http://dotstat.taipei.gov.tw/pxweb2007P/Dialog/varval.asp?ma=TP10502M&ti=%BBO%A5_%A5%AB%A4%BD%A6@%A6%DB%A6%E6%A8%AE%AF%B2%B8%EE%B1%A1%A7%CE&path=../PXfile/CountyStatistics&lang=9&strList=L "台北市政府對 youbike 租借人次的逐月統計"
[taxi open data]: https://data.gov.tw/dataset/6252 "政府開放資料平台上的計程車營運統計資料"

## 問題
維基百科中，新北和台北的資料是分開的。

## 預期成果
預計能看出計程車司機所抱怨的，因為 ubike 的普及，
造成部份市民轉用 ubike，讓計程車使用率下滑。
如果能找到公車、捷運的資料，預計也會出現類似的結果；
但不少 ubike 站是設在捷運站，故捷運站的情況可能較複雜。

[taxi r analysis]: https://ithelp.ithome.com.tw/users/20111603/ironman/2012

## 改變主題為 youbike 與捷運
由於計程車的資料難以取得，
改變主題為 youbike 的設站是否會影響捷運站的流量。
所搜集到的資料有維基百科上各 youbike 站設站時間，
[2015 年到 2018 年間每日捷運的各站進出人數統計。][mrt count]

[mrt count]: https://www.metro.taipei/cp.aspx?n=FF31501BEBDD0136 "捷運每月各站人數統計"

## youbike 與捷運流程

### 整理 youbike 資料
 1. 使用 javascript 從維基百科頁面中整理出所有站點的設立日期。

 2. 使用 javascript 以站點名作聯繫，
    將站點設立日期與 youbike 官方提供的站點空間座標關聯。

### 整理捷運資料
資料合併，合併各站各日為各站每月總人數。
因每日流量變化較大，且受平日假日影響，
合併為月流量後才較穩定。

之後發現月流量仍不穩定，
主要變化來自各月份天數不同，
因此再將月流量除以天數得到平均日流量。

### 空間分析
篩選出在捷運站附近的 youbike 站，
以行人徒步可接受的 500 公尺作半徑，
篩選出會可能對該捷運站人流造成影響的 youbike 站。

### 作圖比較
使用 chart.js 作圖，
視覺化捷運站在設立 youbike 站前後一個月與逐年的變化。

```json-change-youbike
{"關渡":[["2015-07-01T16:00:00.000Z","2015-08-01T16:00:00.000Z","2015-09-01T16:00:00.000Z","2016-07-01T16:00:00.000Z","2016-08-01T16:00:00.000Z","2016-09-01T16:00:00.000Z","2017-07-01T16:00:00.000Z","2017-08-01T16:00:00.000Z","2017-09-01T16:00:00.000Z","2015-11-01T16:00:00.000Z","2015-12-01T16:00:00.000Z","2016-01-01T16:00:00.000Z","2016-11-01T16:00:00.000Z","2016-12-01T16:00:00.000Z","2017-01-01T16:00:00.000Z","2017-11-01T16:00:00.000Z","2017-12-01T16:00:00.000Z","2018-01-01T16:00:00.000Z"],[22336.3225806452,20830.8709677419,25097.4666666667,21670.2258064516,21856.9677419355,24305.7,22260.3870967742,22233.0967741935,24396.5333333333,24549.6333333333,25446,22906.8387096774,25048.5,26407.2258064516,24239.9677419355,23563,25368.4838709677,23719]],"辛亥":[["2015-05-01T16:00:00.000Z","2015-06-01T16:00:00.000Z","2015-07-01T16:00:00.000Z","2016-05-01T16:00:00.000Z","2016-06-01T16:00:00.000Z","2016-07-01T16:00:00.000Z","2017-05-01T16:00:00.000Z","2017-06-01T16:00:00.000Z","2017-07-01T16:00:00.000Z"],[5874.38709677419,5763.4,5871.12903225806,5671.35483870968,5803.86666666667,5658.70967741936,5632.16129032258,5796.16666666667,5686]],"萬芳社區":[["2015-03-01T16:00:00.000Z","2015-04-01T16:00:00.000Z","2015-05-01T16:00:00.000Z","2016-03-01T16:00:00.000Z","2016-04-01T16:00:00.000Z","2016-05-01T16:00:00.000Z","2017-03-01T16:00:00.000Z","2017-04-01T16:00:00.000Z","2017-05-01T16:00:00.000Z"],[4209.61290322581,4320.23333333333,4213.48387096774,4280.74193548387,4310.6,4149.51612903226,4168.83870967742,4360.73333333333,4126.90322580645]],"忠義":[["2015-06-01T16:00:00.000Z","2015-07-01T16:00:00.000Z","2015-08-01T16:00:00.000Z","2016-06-01T16:00:00.000Z","2016-07-01T16:00:00.000Z","2016-08-01T16:00:00.000Z","2017-06-01T16:00:00.000Z","2017-07-01T16:00:00.000Z","2017-08-01T16:00:00.000Z"],[5191.96666666667,5126.45161290323,4768.45161290323,5182.63333333333,5025.96774193548,4986.45161290323,5185.26666666667,5217.12903225806,5244.67741935484]],"萬隆":[["2016-06-01T16:00:00.000Z","2016-07-01T16:00:00.000Z","2016-08-01T16:00:00.000Z","2017-06-01T16:00:00.000Z","2017-07-01T16:00:00.000Z","2017-08-01T16:00:00.000Z","2018-06-01T16:00:00.000Z","2018-07-01T16:00:00.000Z","2018-08-01T16:00:00.000Z"],[18045.3,17887.6129032258,17893.8709677419,17952.2,17898.1290322581,17679.064516129,17853.8666666667,18105.1935483871,17842.5161290323]],"中山":[["2016-06-01T16:00:00.000Z","2016-07-01T16:00:00.000Z","2016-08-01T16:00:00.000Z","2017-06-01T16:00:00.000Z","2017-07-01T16:00:00.000Z","2017-08-01T16:00:00.000Z","2018-06-01T16:00:00.000Z","2018-07-01T16:00:00.000Z","2018-08-01T16:00:00.000Z"],[73450.5333333333,74735.9032258065,75170.935483871,73447.8333333333,75673.5483870968,77326.1612903226,72763.0666666667,74052.064516129,73916.3870967742]],"頭前庄":[["2015-01-01T16:00:00.000Z","2015-02-01T16:00:00.000Z","2015-03-01T16:00:00.000Z","2016-01-01T16:00:00.000Z","2016-02-01T16:00:00.000Z","2016-03-01T16:00:00.000Z","2017-01-01T16:00:00.000Z","2017-02-01T16:00:00.000Z","2017-03-01T16:00:00.000Z"],[9519.58064516129,9804.25,9432.61290322581,9402.48387096774,9114.93103448276,9255.06451612903,9182.77419354839,9629.07142857143,8762.41935483871]],"輔大":[["2015-06-01T16:00:00.000Z","2015-07-01T16:00:00.000Z","2015-08-01T16:00:00.000Z","2016-06-01T16:00:00.000Z","2016-07-01T16:00:00.000Z","2016-08-01T16:00:00.000Z","2017-06-01T16:00:00.000Z","2017-07-01T16:00:00.000Z","2017-08-01T16:00:00.000Z"],[22807.4333333333,20497.6129032258,17829.7096774194,21714.9666666667,19498.7419354839,18371.3225806452,21676.2,19801.4516129032,19027.4516129032]],"紅樹林":[["2016-05-01T16:00:00.000Z","2016-06-01T16:00:00.000Z","2016-07-01T16:00:00.000Z","2017-05-01T16:00:00.000Z","2017-06-01T16:00:00.000Z","2017-07-01T16:00:00.000Z","2018-05-01T16:00:00.000Z","2018-06-01T16:00:00.000Z","2018-07-01T16:00:00.000Z"],[12781.2580645161,12926.3333333333,12898.6451612903,12944.9032258065,13113.4333333333,12966.2903225806,13616.5161290323,14072.9,13767.935483871]]}
```

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.bundle.js"></script>

<script type="module">
const youbikeJsonNode = document.querySelector('.lang-json-change-youbike')
function fetchYoubikeData() {
    const json = JSON.parse(youbikeJsonNode.textContent)
    for (const station in json) {
        json[station][0] = json[station][0].map(d => {
            const date = new Date(d)
            if (date.valueOf()) return date
            else return d
        })
    }
    return json
}

const color = {
    "-1": 'rgba(0, 255, 255, 1)',
    "0": 'rgba(0, 180, 237, 1)',
    "1": 'rgba(0, 110, 220, 1)',
    "null": 'rgba(0, 0, 0, 0)'
}

function plotStation(canvas, station, data) {
    const lines = []
    const date = data[0].slice()
    const count = data[1].slice()
    while (count.length > 0) {
        for (const yearResidue of [-1, 0, 1]) {
            const year = {}
            const monthCount = count.splice(0, 3)
            const monthDate = date.splice(0, 3)
            year.data = monthDate.map((d, i) => {
                const correctDate = new Date(d)
                const year = d.getFullYear() - yearResidue
                correctDate.setFullYear(year)
                return {t: correctDate, y: monthCount[i]}
            })
            year.label = String(monthDate[0].getFullYear())
            year.pointStyle = 'circle'
            year.borderColor = color[yearResidue]
            year.backgroundColor = color[null]
            lines.push(year)
        }
    }

    const chart = new Chart(canvas, {
        type: 'line',
        data: {
            datasets: lines
        },
        options: {
            title: {
                display: true,
                text: station
            },
            scales: {
                xAxes: [{
                    type: 'time',
                    scaleLabel: {
                        display: true,
                        labelString: '月份'
                    },
                    time: {
                        unit: 'month',
                        displayFormats: {
                            month: 'M'
                        }
                    }
                }],
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: '平均日人次'
                    }
                }]
            }
        }
    })
}

const json = fetchYoubikeData()
for (const station in json) {
    const canvas = document.createElement('canvas')
    plotStation(canvas, station, json[station])
    youbikeJsonNode.before(canvas)
}
</script>

## 結果分析
影響捷運流量的因素太多了，
像是一開始作圖就發現捷運流量
很明顯在大月就會多、小月就會少。
雖然已除去每月天數的影響，
但仍沒有消除的是每月工作日與休息日的差異。
而單就 youbike 造成的影響相對很小，
也就無法從波動中看出。


<link rel="stylesheet" href="ext/paper.css" />

<script src="ext/paper.js?execute"></script>

<script src="ext/header-nctu.js?execute&editable"></script>

<script>
function $html(template, ...text) {
  const result = []
  for (let i=0; i<template.length; i++) {
    if (i>0) result.push(encodeHtml(text[i-1]))
    result.push(template[i])
  }
  return result.join('')
  
  function encodeHtml(text) {
    return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
  }
}
gmeta.reference = {
  imageCounter: 1,
  add(title, url, context) {
    const entry = this.createEntry(title, url, context)
    this.node.appendChild(entry)
  },
  createEntry(title, url, context) {
    const dl = document.createElement('dl')
    const dt = document.createElement('dt')
    dt.textContent = title
    dl.appendChild(dt)
    dl.innerHTML = $html`<dt>${title}</dt>
    <dd>${url}</dd>
    <dd class="context">${context}</dd>`
    return dl
  },
  node: document.createDocumentFragment(),
  render() {
    const main = document.querySelector('main')
    let referenceHeader = document.querySelector('h2.reference')
    if (!referenceHeader) {
      referenceHeader = document.createElement('h2')
      referenceHeader.textContent = '參考資料'
      referenceHeader.classList.add('reference')
      main.appendChild(referenceHeader)
    }
    if (referenceHeader.nextSibling) {
      referenceHeader.parentNode.insertBefore(
        this.node, referenceHeader.nextSibling
      )
    }
    else main.appendChild(this.node)
  }
}
document.querySelectorAll('a').forEach(anchor => {
  const reference = gmeta.reference
  if (anchor.classList.contains('image')) {
    const cjk = gmeta.patchCjkCounter.numberToCjk(reference.imageCounter)
    reference.add('圖' + cjk, anchor.href, anchor.title)
    reference.imageCounter++
  }
  else reference.add(anchor.title, anchor.href, anchor.textContent)
})
gmeta.reference.render()
</script>

<style>
main {
  counter-reset: reference-id;
}
a {
  counter-increment: reference-id;
}
a::after {
  content: "[" counter(reference-id) "]";
  font-size: smaller;
}
dd.context::before, dd.context::after {
  content: "……";
}

script, style {
  display: none;
}
.lang-json-change-youbike {
  display: none;
}
</style>

#gis
#nctu
#report
