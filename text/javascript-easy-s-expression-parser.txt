# 試做 s 表達式解析器
用 lisp 資料結構實作 lisp 直譯器簡單在省去
從字串解析成巢狀鏈表的過程，
所以想試著寫一個從字串解析成鏈表的程式，看這步的難度。
是用比較熟悉的 javascript 寫的，
因為我不會 scheme 或 common lisp 的字串處理函數。

## 斷詞器
發現分成二部會比較好做，不然會太複雜。
先把字串拆成一個 tocken 鏈表，
也就是平展的表，裡面把 `(` `)` 也視作 tocken。

<script>
function tockenize(string) {
    const space = /^\s+/
    const startBracket = /^\(/
    const endBracket = /^\)/
    const word = /^[\w-]+/
    const stringRegexp = {
        delimiter: /^"/,
        char: /^[^\\"]/,
        escape: /^\\/,
        remove: function () {
            let matchString = ''
            string = string.slice(1)
            while (!match(this.delimiter)) {
                if (match(this.char)) matchString += remove(this.char)
                else if (match(this.escape)) {
                    remove(this.escape)
                    matchString += remove(/./)
                }
            }
            remove(this.delimiter)
            return matchString
        }
    }
        
    const regexpList = [startBracket, endBracket]
    const tockenList = []
    while (string.length > 0) {
        if (match(space)) remove(space)
        else if (match(word)) {
            const wordString = remove(word)
            const atom = new Atom(wordString, 'symbol')
            tockenList.push(atom)
        }
        else if (match(stringRegexp.delimiter)) {
            const stringValue = stringRegexp.remove(string)
            tockenList.push(new Atom(stringValue, 'string'))
        }
        else regexpList.forEach((regexp) => {
            if (match(regexp)) tockenList.push(remove(regexp))
        })
    }
    return tockenList
    function match(regexp) {
        return regexp.test(string)
    }
    function remove(regexp) {
        const matchString = string.match(regexp)[0]
        string = string.replace(regexp, '')
        return matchString
    }
}
</script>

## 解析器
把平展的表解析的巢狀的表比較需要思考，
但其實 code 沒那麼長。
我是用遞迴做的，可能也只能用遞迴做？
但比較特別是沒有用到迴圈，
因為是用 sicp 教的思考方式，
而且要得到解析到哪裡還蠻麻煩的。

<script>
function nestize(tocken) {
    return recur([], tocken)[0]

    function recur(currentList, tocken) {
        if (tocken.length == 0) return currentList
        else if (tocken[0] == ')') return {
            parse: currentList,
            tocken: tocken.slice(1)
        }
        else if (tocken[0] == '(') {
            const subParse = recur([], tocken.slice(1))
            currentList.push(subParse.parse)
            return recur(currentList, subParse.tocken)
        }
        else {
            currentList.push(tocken[0])
            return recur(currentList, tocken.slice(1))
        }
    }
}
</script>

## 用 atom 代表一個字
本來還沒加字串時，是沒有用特殊物件的，
都直接用字串代表符號。
後來因為要和字串區分，只好引進一類似 tocken 的元素，
將字串、數字、符號都視為不同類的 tocken，
只是目前只實作了字串和符號。

目前的字串是用雙引號包起來，
中間要再放雙引號要用反斜線跳脫，
也可以放 enter 或任何其它字元。

其實字串和符號只有一線之隔，
可以把符號視為 *只能比較相不相等* 的字串，
但實作上可以用 hash 做，不用真得保存所有字元。
關於符號那些神奇的特性，
其實是依賴 eval 這個黑魔法實現的。

<script>
class Atom {
    constructor(value, type) {
        this.value = value
        this[type] = true
        this.type = type
    }
    toString() {
        switch (this.type) {
        case 'symbol':
            return '@' + this.value
        case 'number':
            return Number(this.value)
        case 'string':
            return this.value
        default:
            return `Atom ${this.value}`
        }
    }
}
</script>

<form id="playground">
<h2>玩沙區</h2>
<p>要先按 tockenize 把 s-expression 解析成 tocken list，
再按 nestize 把 tocken list 解析成巢狀。
目前用 atom 看起來有點醜，
因為被解析成 json 後會出現一堆 atom object。</p>
<textarea>
(begin
 (define (first list)
   (car list))
 (define (second list)
   (car (cdr list)))
 (define (third list)
   (second (cdr list)))
 (third list))
</textarea>
<button type="button" onclick="tockenizeTextarea()">tockenize</button>
<button type="button" onclick="nestizeTextarea()">nestize</button>
<style>
form textarea {
  width: 100%;
  display: block;
  height: 20em;
}
</style>
</form>

<script>
function ioInput(pipe) {
  const element = document.querySelector('#playground textarea')
  element.value = pipe(element.value)
}
function prettyJson(struct) {
  return JSON.stringify(struct, ['value', 'type'], 2)
}
function tockenizeTextarea() {
  ioInput(tockenizeJson)
  function tockenizeJson(string) {
    return prettyJson(tockenize(string))
  }
}
function nestizeTextarea() {
  ioInput(nestizeJson)
  function nestizeJson(json) {
    const struct = JSON.parse(json)
    return prettyJson(nestize(struct))
  }
}
</script>

#javascript
#lisp
#s-expression
#parser
#互動
