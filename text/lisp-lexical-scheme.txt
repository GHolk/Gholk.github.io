# lisp、閉包與 scheme
傳統 lisp 是動態作用域，沒有閉包的概念，
但現代詞法作用域 lexical scope 似乎是主流。
其實回到最初，是沒有 scope 這個問題的。
lisp 就只是一個純粹的用列表表示的語言，
似乎動態作用域才是主流。

## 程式的直覺或人的直覺
一群鼓吹函數式編程與 lexical scope 的人創造了 scheme；
到現在另一大 lisp 分支 common lisp 也採用了動態作用域。
我也一直以為 scheme 較先進，
直到我讀了 [lisp 之根源] ，
才知道 lisp 並不是有意的選擇了 dynamic 或 lexical，
而是他什麼都沒做，便成了 dynamic。

[lisp 之根源]: http://daiyuwen.freeshell.org/gb/rol/roots_of_lisp.html

似乎 dynamic 是較自然的作法，
lisp 最初很簡單的把函數表示為一個列表，
自然沒有多餘的地方放所謂閉包。
lexical 則是要在每一函數宣告時，
將目前的 scope 保存一份到函數內。

這似乎是友善或優雅的對立。
dynamic 的實現較簡單直覺優雅，但使用上為人詬病；
lexical 的使用直覺，但實作上有難處。

#lisp
#scheme
#scope
#closure
