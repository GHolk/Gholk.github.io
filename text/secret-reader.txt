# 解密閱讀器
用來讀全篇 pgp 加密的文章。
需要載入 openpgpjs，流量會稍大。

* 一般使用時，把加密的檔案放在 pgp encrypt file 欄位，
  檔案為 binary 或 armor 皆可。
* filepath 欄位是用來解密部落格上文章用的，不使用請留空。
* 如果是用密碼加密，輸入密碼即可，private key 欄位留空。
* 如果是用公私鑰加密，需要把私鑰用 armor 格式貼在 pgp private key 裡。
* 如果貼上的私鑰是有密碼保護的，則要把密碼輸入在 password 欄位，
  否則私鑰無密碼保護時 password 欄位請留空。

<form>
<label>
filepath
<input name="file-path" type="text">
</label>

<label>
pgp encrypt file
<input name="file-directly" type="file">
</label>

<label>
password
<input name="pgp-password" type="password">
</label>

<label>
pgp private key
<textarea name="pgp-private-key"></textarea>
</label>

<button type="button" onclick="secretReader.decryptForm()">decrypt</button>

<input type="reset">

<output name="plain-text"></output>
</form>

<style>
  output {
    white-space: pre-wrap;
  }
  label, output, textarea {
    display: block;
  }
</style>

<script src="ext/decrypt-post.js"></script>

<script>
var secretReader
loadOpenpgp.then(openpgp => {
    secretReader = {
        openpgp,
        form: document.querySelector('form'),
        getFormName(name) {
            return this.form.elements[name]
        },
        async fetchEncryptUint8Array(path) {
            if (!path) path = this.getFormName('file-path').value
            const response = await fetch(path)
            const arrayBuffer = await response.arrayBuffer()
            return new Uint8Array(arrayBuffer)
        },
        async loadEncryptUint8Array() {
            const path = this.getFormName('file-path').value
            if (path) return await this.fetchEncryptUint8Array(path)

            const fileNode = this.getFormName('file-directly')
            if (fileNode.files.length > 0) {
                const arrayBuffer = await fileNode.files[0].arrayBuffer()
                return new Uint8Array(arrayBuffer)
            }

            throw new Error('no encrypt file')
        },
        parsePgpMessage(binary) {
            const textDecoder = new TextDecoder()
            let armorText
            try {
                const text = textDecoder.decode(binary)
                if (/-----BEGIN PGP MESSAGE-----/.test(text)) {
                    armorText = text
                }
            }
            catch (textDecodeError) {
                armorText = null
            }
            if (armorText) return this.openpgp.message.readArmored(armorText)
            else {
                const stream = false
                return this.openpgp.message.read(binary, stream)
            }
        },
        async decrypt(message, type, key) {
            let typename
            if (type == 'privateKey') typename = 'privateKeys'
            else typename = 'passwords'
            const plain = await this.openpgp.decrypt({
                message, [typename]: key
            })
            return plain.data
        },
        async decryptForm() {
            const password = this.getFormName('pgp-password').value
            const armorPrivateKey = this.getFormName('pgp-private-key').value
            let type
            let key
            if (armorPrivateKey) {
                const privateKey = this.openpgp.key.readArmored(armorPrivateKey)
                if (password) {
                    try {
                        await privateKey.keys[0].decrypt(password)
                    }
                    catch (privateKeyDecryptError) {
                        alert('can not decrypt private key')
                        throw privateKeyDecryptError
                    }
                }
                type = 'privateKey'
                key = privateKey.keys[0]
            }
            else {
                type = 'password'
                key = password
            }

            const path = this.getFormName('file-path').value
            let binary
            try {
                binary = await this.loadEncryptUint8Array(path)
            }
            catch (loadFileError) {
                alert(loadFileError.message)
                throw loadFileError
            }
            
            const message = this.parsePgpMessage(binary)
            let plain
            try {
                plain = await this.decrypt(message, type, key)
            }
            catch (decryptError) {
                alert('wrong pgp key')
                throw decryptError
            }
            this.outputResult(path, plain)
        },
        outputResult(path, plain) {
            if (/\.html?\.gpg$/.test(path)) this.outputReslutHtml(plain)
            else this.getFormName('plain-text').textContent = plain
        },
        outputReslutHtml(html) {
            const iframe = document.createElement('iframe')
            const output = this.getFormName('plain-text')
            output.textContent = ''
            output.appendChild(iframe)
            iframe.contentDocument.write(html)
            iframe.contentDocument.close()
        },
        loadQueryString() {
            for (const [name, value] of Object.entries(goption)) {
                const node = this.getFormName(name)
                if (node) node.value = value
            }
            if (goption['pgp-password']) this.decryptForm()
        }
    }
    secretReader.loadQueryString()
})
</script>

#encrypt
#blog

